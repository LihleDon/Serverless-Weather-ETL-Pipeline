AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Weather Data ETL Pipeline

Resources:
  WeatherDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: lihle-weather-data-bucket-2025

  WeatherTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WeatherRecords
      AttributeDefinitions:
        - AttributeName: city
          AttributeType: S
        - AttributeName: date
          AttributeType: S
      KeySchema:
        - AttributeName: city
          KeyType: HASH
        - AttributeName: date
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  FetchWeatherDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: FetchWeatherData.lambda_handler
      Runtime: python3.9
      Timeout: 30
      CodeUri: FetchWeatherData/
      Policies:
        - S3CrudPolicy:
            BucketName: lihle-weather-data-bucket-2025

  LoadToDynamoDBFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: LoadToDynamoDB.lambda_handler
      Runtime: python3.9
      Timeout: 30
      CodeUri: LoadToDynamoDB/
      Policies:
        - S3CrudPolicy:
            BucketName: lihle-weather-data-bucket-2025
        - DynamoDBCrudPolicy:
            TableName: !Ref WeatherTable

  WeatherETLStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt FetchWeatherDataFunction.Arn
                  - !GetAtt LoadToDynamoDBFunction.Arn

  WeatherETLStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: FetchWeatherData
        States:
          FetchWeatherData:
            Type: Task
            Resource: !GetAtt FetchWeatherDataFunction.Arn
            Next: LoadToDynamoDB
          LoadToDynamoDB:
            Type: Task
            Resource: !GetAtt LoadToDynamoDBFunction.Arn
            End: true
      Role: !GetAtt WeatherETLStateMachineRole.Arn

  DailyTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsTriggerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt WeatherETLStateMachine.Arn

  DailyTrigger:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      Targets:
        - Arn: !GetAtt WeatherETLStateMachine.Arn
          Id: WeatherETLStateMachineTarget
          RoleArn: !GetAtt DailyTriggerRole.Arn

Outputs:
  WeatherDataBucketName:
    Value: !Ref WeatherDataBucket
  WeatherTableName:
    Value: !Ref WeatherTable
  StateMachineArn:
    Value: !GetAtt WeatherETLStateMachine.Arn